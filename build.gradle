/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.3/samples
 */

tasks.register('unpackjars') {
	gradle.ext.mcversions.each {
		def folder = file('./build/tmp/' + it)
		if(folder.exists()) {
			delete folder
		}
		file(folder.absolutePath + '/META-INF').mkdirs()
		
		def manifest = file('./build/tmp/' + it + '/META-INF/MANIFEST.MF')
		manifest.text = 'Manifest-Version: 1.0\n'
		
		def fabricjar = file('./fabric' + it + '/build/libs/' + gradle.ext.fabricname + '-' + gradle.ext.modversion + '.jar')
		if(fabricjar.exists()) {
			def fabrictmp = file('./build/tmp/fabric' + it)
			if(fabrictmp.exists()) {
				delete fabrictmp
			}
			copy {
				from(zipTree(fabricjar))
				into(fabrictmp)
			}
			fileTree(fabrictmp).each {
				def relpath = it.absolutePath.substring(fabrictmp.absolutePath.length())
				def target = file(folder.absolutePath + relpath)
				if(relpath == '\\META-INF\\MANIFEST.MF') {
					manifest.text += it.text.substring(it.text.indexOf('\n') + 1)
				}else if(!target.exists()){
					def source = it
					def targetParent = target.getParentFile()
					targetParent.mkdirs()
					copy {
						from source
						into targetParent
					}
				}
			}
		}
		
		def forgejar = file('./forge' + it + '/build/libs/' + gradle.ext.forgename + '-' + gradle.ext.modversion + '.jar')
		if(forgejar.exists()) {
			def forgetmp = file('./build/tmp/forge' + it)
			if(forgetmp.exists()) {
				delete forgetmp
			}
			copy {
				from(zipTree(forgejar))
				into(forgetmp)
			}
			fileTree(forgetmp).each {
				def relpath = it.absolutePath.substring(forgetmp.absolutePath.length())
				def target = file(folder.absolutePath + relpath)
				if(relpath == '\\META-INF\\MANIFEST.MF') {
					manifest.text += it.text.substring(it.text.indexOf('\n') + 1)
				}else if(!target.exists()){
					def source = it
					def targetParent = target.getParentFile()
					targetParent.mkdirs()
					copy {
						from source
						into targetParent
					}
				}
			}
		}
	}
}

gradle.ext.mcversions.each {
	def mcversion = it
	task "zip$it"(type: Zip, dependsOn: "unpackjars") {
		from fileTree('./build/tmp/' + mcversion)
		archiveName = rootProject.name + "-" + mcversion + "-" + gradle.ext.modversion + ".jar"
		destinationDir = file('./build/libs')
	}
}

task build {
	dependsOn tasks.getByName('unpackjars')
	gradle.ext.mcversions.each {
		dependsOn tasks.getByName("zip$it")
	}
}

configure(subprojects.findAll {it.name != 'common'}) {
	apply plugin: 'java'
	sourceSets {
		main {
			java {
				srcDir '../common/src'
			}
		}
	}
}